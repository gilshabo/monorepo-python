name: Service Deployment to {env}

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  packages: read # Required for pulling packages/images to gcr


jobs:
  deploy-services:
    runs-on: ubuntu-24.04
    timeout-minutes: 15

    environment: ${{ inputs.environment }}
    steps:
      - name: Check-out Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full checkout

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE }}
          role-session-name: GithubWorkflow-Deployment-dev-staging
          aws-region: ${{ vars.AWS_PRIMARY_REGION }}
          output-credentials: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pre-init Devcontainer
        run: |
          echo "PWD=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          rm .devcontainer/devcontainer.json

          echo "Switching to devcontainer-ci.json which is built from the devcontainer image in ghcr, pushed in Pre-build DevContainer job"
          cp .devcontainer/devcontainer-ci.json .devcontainer/devcontainer.json

      - name: Deploy Services to ${{ inputs.environment }}
        uses: devcontainers/ci@v0.3
        with:
          env: |
            AWS_ACCESS_KEY_ID=${{ steps.aws-creds.outputs.aws-access-key-id }}
            AWS_SECRET_ACCESS_KEY=${{ steps.aws-creds.outputs.aws-secret-access-key }}
            AWS_SESSION_TOKEN=${{ steps.aws-creds.outputs.aws-session-token }}
            AWS_REGION=${{ vars.AWS_PRIMARY_REGION }}
            AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}
            AWS_PRIMARY_REGION=${{ vars.AWS_PRIMARY_REGION }}
            AWS_GITHUB_ACTIONS_ROLE=${{ vars.AWS_GITHUB_ACTIONS_ROLE }}
            ENV=${{ inputs.environment }}
          runCmd: |
            echo $"\nVerifying AWS credentials..."
            if ! aws sts get-caller-identity; then
              echo "AWS authentication failed. Debug info:"
              aws sts get-caller-identity --debug
              exit 1
            fi
            echo "Successfully authenticated with AWS"

            if [ -z "$AWS_ACCOUNT_ID" ] || [ -z "$AWS_PRIMARY_REGION" ] || [ -z "$AWS_GITHUB_ACTIONS_ROLE" ]; then
              echo "Failed to retrieve necessary AWS variables for $ENV environment"
              return 1
            fi

            TAG_AS_LATEST=true
            UPDATE_CONFIG=false

            if [ "$ENV" = "prod" ]; then
                TAG_AS_LATEST="false"
            fi

            echo $"\nDeploying to $ENV environment..."
            chmod +x .github/scripts/sam-build-and-deploy-services.sh
            chmod +x .github/scripts/deploy-service-configuration.sh

            if ! .github/scripts/sam-build-and-deploy-services.sh $ENV $AWS_ACCOUNT_ID $AWS_PRIMARY_REGION $UPDATE_CONFIG TAG_AS_LATEST; then
              echo "Deployment failed for $ENV environment"
              return 1
            fi
            echo "Deployment completed successfully for $ENV environment"